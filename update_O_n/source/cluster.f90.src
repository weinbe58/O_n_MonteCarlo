
subroutine SW(N,d,spins,z,NN,nd,dims,measure,NMs,NM,Ms,beta,Jc,mcsteps,dm,f_id,h)
implicit none
integer(kind=4), intent(in) :: N,d,nd,z,mcsteps,NM,NMs,dm,f_id
logical(kind=4), intent(in) :: measure
real(kind=8), intent(in) :: beta,Jc,h
real(kind=8), intent(inout), dimension(0:N-1,0:d-1) :: spins
real(kind=8), intent(inout), dimension(0:NMs-1,NM) :: Ms
integer(kind=4), intent(in), dimension(0:N-1,0:z-1) :: NN
integer(kind=4), intent(in), dimension(0:nd-1) :: dims
real(kind=8), dimension(0:d-1) :: r
integer(kind=4), dimension(0:N-1) :: c
integer(kind=4) :: i,j

Ms = 0.0d0
do i=0,mcsteps-1

if( d.eq.1) then
r = 1
else
call random_spin(d,r)
end if

! reset cluster marker
c = 0

do j=0,N-1
if (c(j) .ne.-1) then
call flip_cluster(N,d,spins,z,NN,beta,Jc,f_id,h,r,j,c,.true.)
end if
end do

if(modulo(i,dm) .eq. 0 .and. measure) then
call measure_local(N,d,NN,nd,dims,spins,NM,Ms(i/dm,:),Jc,f_id)
end if
end do

end subroutine





subroutine Wolff(N,d,spins,z,NN,nd,dims,measure,NMs,NM,Ms,beta,Jc,mcsteps,dm,f_id,h)
implicit none
integer(kind=4), intent(in) :: N,d,nd,z,mcsteps,NM,NMs,dm,f_id
logical(kind=4), intent(in) :: measure
real(kind=8), intent(in) :: beta,Jc,h
real(kind=8), intent(inout), dimension(0:N-1,0:d-1) :: spins
real(kind=8), intent(inout), dimension(0:NMs-1,NM) :: Ms
integer(kind=4), intent(in), dimension(0:N-1,0:z-1) :: NN
integer(kind=4), intent(in), dimension(0:nd-1) :: dims
real(kind=8), dimension(0:d-1) :: r
real(kind=8), external :: ranf
integer(kind=4), dimension(0:N-1) :: c
integer(kind=4) :: i,j

Ms = 0.0d0
do i=0,mcsteps-1

if( d.eq.1) then
r = 1
else
call random_spin(d,r)
end if

! reset cluster marker
c = 0
j=int(floor(ranf()*N))
call flip_cluster(N,d,spins,z,NN,beta,Jc,f_id,h,r,j,c,.false.)


if(modulo(i,dm) .eq. 0 .and. measure) then
call measure_local(N,d,NN,nd,dims,spins,NM,Ms(i/dm,:),Jc,f_id)
end if
end do

end subroutine








subroutine flip_cluster(N,d,spins,z,NN,beta,Jc,f_id,h,r,x0,c,sw)
implicit none
integer(kind=4), intent(in) :: N,d,z,f_id,x0
logical(kind=4), intent(in) :: sw
real(kind=8), intent(in) :: beta,Jc,h
real(kind=8), intent(inout), dimension(0:N-1,0:d-1) :: spins
integer(kind=4), intent(inout), dimension(0:N-1) :: c
integer(kind=4), intent(in), dimension(0:N-1,0:z-1) :: NN
real(kind=8), intent(in), dimension(0:d-1) :: r

real(kind=8), dimension(0:d-1) :: spin_i,spin_f
integer(kind=4), dimension(0:N) :: stack,clist
real(kind=8), dimension(0:N) :: spin_par
real(kind=8), external :: ranf,local,f_pop
integer(kind=4), external :: i_pop
integer(kind=4) :: i,j,k
real(kind=8) :: P,dE,s_par


! mark site
c(x0) = -1

stack=0
clist=0
spin_par=0.0d0
dE=0.0d0


! start making cluster with stack
call i_append(stack,N,x0)




do while(stack(0) .gt. 0)
j = i_pop(stack,N)

spin_i = spins(j,:)
s_par = dot_product(r,spin_i)
spin_f = spin_i - 2.0d0*s_par*r
dE = dE + local(d,spin_f,spin_i,f_id,h)


call i_append(clist,N,j)
call f_append(spin_par,N,s_par)


do i=0,z-1
k=NN(j,i)

if(k.ge.0)then

if(c(k) .eq. 0) then

P = -beta*Jc*2.0d0*dot_product(spins(k,:),r)*dot_product(spin_f,r)
P = 1.0d0 - dexp(min(0.0d0,P))

if(ranf().lt.P) then
c(k) = -1 ! mark site as added
call i_append(stack,N,k) ! append site to stack to be added to cluster list
end if

end if

end if
end do

end do

P=min(1.0d0,dexp(-beta*dE))

if(sw) then
P = P * 0.5d0
end if



if(ranf() .lt. P)then

do while(clist(0) .gt. 0)
k=i_pop(clist,N)
s_par=f_pop(spin_par,N)
spin_f = spins(k,:) - 2.0d0*s_par*r
spins(k,:) = spin_f/dsqrt(dot_product(spin_f,spin_f))
end do

end if


end subroutine



